<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode-72</title>
    <link href="/2020/05/31/LeetCode-72/"/>
    <url>/2020/05/31/LeetCode-72/</url>
    
    <content type="html"><![CDATA[<p>Description of this problem:</p><h2 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a>72. Edit Distance</h2><p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p><p>You have the following 3 operations permitted on a word:</p><ol><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ol><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example  1:"></a>Example  1:</h3><pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;Output: 3Explanation: horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)rorse -&gt; rose (remove &#39;r&#39;)rose -&gt; ros (remove &#39;e&#39;)</code></pre><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example  2:"></a>Example  2:</h3><pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;Output: 5Explanation: intention -&gt; inention (remove &#39;t&#39;)inention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)enention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)exention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)exection -&gt; execution (insert &#39;u&#39;)</code></pre><h2 id="My-understand"><a href="#My-understand" class="headerlink" title="My understand:"></a>My understand:</h2><h3 id="First-try"><a href="#First-try" class="headerlink" title="First try:"></a>First try:</h3><p>At beginning, I notice that LCS(longest common subsequence) could be used here, for example in example 1:</p><pre><code class="java">word1 = &quot;horse&quot;, word2 = &quot;ros&quot;;their LCS = &quot;os&quot;;thus except these common subsequence, word1 should replace, delete or replace in order to become word2;</code></pre><p>And here is my implementation:</p><pre><code class="java">class Solution {    public int minDistance2(String word1, String word2) {        int l1 = word1.length();        int l2 = word2.length();        int[][] table = new int[l2 + 1][l1 + 1];        int max = 0;        for (int i = 0; i &lt; l2; i++) {            for (int j = 0; j &lt; l1; j++) {                if (word1.charAt(j) == word2.charAt(i)) table[i + 1][j + 1] = table[i][j] + 1;                else table[i + 1][j + 1] = Math.max(table[i][j + 1], table[i + 1][j]);                max = Math.max(max, table[i + 1][j + 1]);            }        }        return Math.max(l1,l2) - max;    }}</code></pre><p>Here is the result:</p><pre><code>1003/1146 test cases passedInput:&quot;intention&quot; &quot;execution&quot;Expected: 5Output: 4</code></pre><p>The reason is that, in this way I try to reuse characters of common subsequence and only modify others. However, not all of the subsequence could be reused. In this case, the LCS is <code>&quot;etion&quot;</code>, but <code>&quot;e&quot;</code> in the wrong position, and cannot be excepted from additional operation.</p><h3 id="The-right-way"><a href="#The-right-way" class="headerlink" title="The right way"></a>The right way</h3><p>After reading solution I realize this is a classic problem, and there is a famous algorithm (Levenshtein distance) behind it:<br>$$<br>\operatorname{lev}<em>{a, b}(i, j)=\left{\begin{array}{ll}\max (i, j) &amp; \text { if } \min (i, j)=0 \ \min \left{\begin{array}{ll}\operatorname{lev}</em>{a, b}(i-1, j)+1 &amp; \ \operatorname{lev}<em>{a, b}(i, j-1)+1 &amp; \text { otherwise } \ \operatorname{lev}</em>{a, b}(i-1, j-1)+1_{\left(a_{i} \neq b_{j}\right)}\end{array}\right.\end{array}\right.<br>$$<br>Based on this, I write another:</p><pre><code class="java">public int minDistance(String word1, String word2) {    int l1 = word1.length();    int l2 = word2.length();    if (l1 == 0 || l2 == 0) return l1 + l2;    int[][] table = new int[l2 + 1][l1 + 1];    for (int i = 0; i &lt; l2 + 1; i++) table[i][0] = i;    for (int i = 0; i &lt; l1 + 1; i++) table[0][i] = i;    for (int i = 1; i &lt; l2 + 1; i++) {        for (int j = 1; j &lt; l1 + 1; j++) {            int top = table[i - 1][j] + 1;            int left = table[i][j - 1] + 1;            int topleft = (word1.charAt(j - 1) == word2.charAt(i - 1))? table[i - 1][j - 1] : table[i - 1][j - 1] + 1;            table[i][j] = Math.min(top, Math.min(left, topleft));        }    }    return table[l2][l1];}</code></pre><h3 id="Interesting-observations-to-share"><a href="#Interesting-observations-to-share" class="headerlink" title="Interesting observations to share"></a>Interesting observations to share</h3><p>Why in (1) we take the minimum between these three entries:</p><p>Here is explanation:</p><pre><code class="java">word1 = &quot;inte&quot;;word2 = &quot;ex&quot;;Suppose at some point we try to get transform from &quot;inte&quot; -&gt; &quot;ex&quot;:1.&quot;inte&quot; -&gt; &quot;e&quot;;            //this case corresponds to adding another &quot;x&quot;2.&quot;int&quot;  -&gt; &quot;ex&quot;;           //this case corresponds to deletion3.&quot;int&quot;  -&gt; &quot;e&quot;;            //this case corresponds to substitution, if word1[i] == word2[j], no substitution needed</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About money</title>
    <link href="/2020/05/30/money/"/>
    <url>/2020/05/30/money/</url>
    
    <content type="html"><![CDATA[<h2 id="I-used-to-wonder-why"><a href="#I-used-to-wonder-why" class="headerlink" title="I used to wonder why:"></a>I used to wonder why:</h2><h3 id="1-Why-some-people-are-rich-but-others-are-not"><a href="#1-Why-some-people-are-rich-but-others-are-not" class="headerlink" title="1. Why some people are rich but others are not."></a>1. Why some people are rich but others are not.</h3><h3 id="2-Why-making-money-is-so-easy-to-people-like-actors"><a href="#2-Why-making-money-is-so-easy-to-people-like-actors" class="headerlink" title="2. Why making money is so easy to people like actors."></a>2. Why making money is so easy to people like actors.</h3><p>One day, I pointed it out:</p><ol><li><p>View money as a special reward which represents your contribution to this society.</p><p>This could explain why engineers, scientists could make a lot of money when then find a way to improve society’s efficiency.</p></li><li><p>The rate of getting money measures your productivity.</p><p>This point could explain why actors could make so much money.</p><p>Everyone could tell a joke, and audience are willing to pay for it. So, literally we could make money in this way, but why only actors really do it? Because our productivity is so low that we can’t count on it. Suppose each joke worth 1 cent per person, in daily life we can tell it to very limited audience. However, actors could tell it to millions of people, and make thousands of dollar per second.</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Why use List</title>
    <link href="/2020/05/27/Why-List/"/>
    <url>/2020/05/27/Why-List/</url>
    
    <content type="html"><![CDATA[<p>Hi there, this is my new series, to record some pitfalls I’ve met during my daily learning of Java.</p><h2 id="Q-why-use-List-list-new-ArrayList-rather-than-ArrayList-list-new-ArrayList"><a href="#Q-why-use-List-list-new-ArrayList-rather-than-ArrayList-list-new-ArrayList" class="headerlink" title="Q: why use List list = new ArrayList rather than ArrayList list = new ArrayList?"></a>Q: why use List list = new ArrayList rather than ArrayList list = new ArrayList?</h2><p>I’ve seen a lot code starts like this:</p><pre><code class="java">List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></pre><p>and I wonder, why not write like this:</p><pre><code class="java">ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></pre><p>because in this way it’s more convenient to use APIs of <code>ArrayList</code> . </p><h2 id="A-The-first-way-will-allow-you-to-make-implementation-specific-changes-without-breaking-existing-code"><a href="#A-The-first-way-will-allow-you-to-make-implementation-specific-changes-without-breaking-existing-code" class="headerlink" title="A: The first way will allow you to make implementation-specific changes without breaking existing code."></a>A: The first way will allow you to make implementation-specific changes without breaking existing code.</h2><p><code>ArrayList</code> and <code>LinkedList</code> implement  <code>List</code> interface, so if you declare <code>list</code> with supepinterface <code>List</code> instead of more specific one (like <code>AarrayList</code> or <code>LinkedList</code>) you can change it later if you find you always need to modify its length but you declared it as an <code>ArrayList</code> a week ago.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Start_to_record</title>
    <link href="/2020/05/09/Start-to-record/"/>
    <url>/2020/05/09/Start-to-record/</url>
    
    <content type="html"><![CDATA[<h1 id="It’s-time-to-start-recording-my-life-now"><a href="#It’s-time-to-start-recording-my-life-now" class="headerlink" title="It’s time to start recording my life now"></a>It’s time to start recording my life now</h1><h2 id="Why-now"><a href="#Why-now" class="headerlink" title="Why now?"></a>Why now?</h2><p>In the past, I always thought that I was too young and I was not well prepared to take a photo. So, I just wait instead of doing anything (which I used to think that I would do). Suddenly, I am almost 25, and I finally realize we should just do it rather than hope in the future something magic will happen, because in most cases, we can never prepared one hundred percent for anything.</p><h2 id="Record-what"><a href="#Record-what" class="headerlink" title="Record what?"></a>Record what?</h2><ol><li>Movies</li><li>Books</li><li>Photos</li></ol><p>Not only just record them, but add meaningful tags to them. Build my memory palace on them. I spend time on them, I hope my record can preserve my feelings.</p><p>Everyday is unique for me, so if I can I want to record all of them. I love my life.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>New Journey</title>
    <link href="/2020/03/17/myfirstBlog/"/>
    <url>/2020/03/17/myfirstBlog/</url>
    
    <content type="html"><![CDATA[<p>As time goes by, I find it’s easier to forget things, which could be my knowledge and sweet memories.</p><p>So, it’s never too early to take screenshot of these invaluable moments.</p><p>I build these pages to remind me of all the wonderful things I’ve experienced.</p><p>I plan to write about:</p><ol><li>Things about life, like this one.</li><li>Technical things I’ve learned from anywhere.</li><li>More to be decided.</li></ol><p>Hope you enjoy my site.</p><p>Fixing small errors now.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
