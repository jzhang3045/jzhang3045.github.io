<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Backtracking</title>
    <link href="/2020/06/30/Backtracking/"/>
    <url>/2020/06/30/Backtracking/</url>
    
    <content type="html"><![CDATA[<p>Recently, in LeetCode’s June Challenge, I’ve met several problems that are typical backtrack problems.</p><p>I am quite new to this method and I’d like to share some useful things that could help me to clarify the idea and implement it.</p><h2 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><pre><code class="java">backtrack(candidate) {    //if candidate meets the stop criteria, then stop immediately    if (candidate) return true;    //whether this candidate is valid depends on its next step    //so, go one step further    //check every next_candidate of this candidate&#39;s list    for (next_candidates : list_of_candidates) {        if (next_candidate) {            //mark this next_candidate has been visited            place(next_candidate);            //go one step further            backtrack(next_candidate);            //come back one step if previous explore failed            remove(next_candidate);        }    }}</code></pre><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Leetcode-332"><a href="#Leetcode-332" class="headerlink" title="Leetcode 332"></a>Leetcode 332</h3><p>Given a list of airline tickets represented by pairs of departure and arrival airports <code>[from, to]</code>, reconstruct the itinerary in order. All of the tickets belong to a man who departs from <code>JFK</code>. Thus, the itinerary must begin with <code>JFK</code>.</p><p>Example 1:</p><pre><code>Input: [[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]Output: [&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</code></pre><p>Example 2:</p><pre><code>Input: [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]Output: [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]Explanation: Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;].             But it is larger in lexical order.</code></pre><p>In every airport, we have to check all possible tickets, that’s why backtracking algorithm is used.</p><p>Implementation:</p><pre><code class="java">class Solution {    //summary：greedy + backtracking    //why greedy: at every step we should select the 3 characters that has the smallest lexucal order    //put all pairs into a hashmap    HashMap&lt;String, List&lt;String&gt;&gt; flightMap = new HashMap&lt;&gt;();    HashMap&lt;String, boolean[]&gt; visitBitmap = new HashMap&lt;&gt;();    int flight = 0;    //store result    List&lt;String&gt; result = null;    public List&lt;String&gt; findItinerary(List&lt;List&lt;String&gt;&gt; tickets) {        // step1: build the graph        for (List&lt;String&gt; ticket : tickets) {            String origin = ticket.get(0);            String dest = ticket.get(1);            if (flightMap.containsKey(origin)) {                List&lt;String&gt; destList = flightMap.get(origin);                destList.add(dest);            } else {                List&lt;String&gt; destList = new LinkedList&lt;&gt;();                destList.add(dest);                flightMap.put(origin, destList);            }        }        //step2: order the destinations and init the visit bitmap        for (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : flightMap.entrySet()) {            Collections.sort(entry.getValue());            visitBitmap.put(entry.getKey(), new boolean[entry.getValue().size()]);        }        flight = tickets.size();        LinkedList&lt;String&gt; route = new LinkedList&lt;&gt;();        route.add(&quot;JFK&quot;);        //step3: backtracking        backtracking(&quot;JFK&quot;, route);        return result;    }    public boolean backtracking(String origin, LinkedList&lt;String&gt; route) {        //when size == flight + 1, we&#39;ve found it!        if (route.size() == flight + 1) {            result = (List&lt;String&gt;) route.clone();            return true;        }        //if no next_candidate, we choose the wrong step in our last selection        if (!flightMap.containsKey(origin)) return false;        int i = 0;        //array used to record which ticket has been used        boolean[] bitmap = visitBitmap.get(origin);        for (String dest : flightMap.get(origin)) {            if (!bitmap[i]) {                bitmap[i] = true;                route.add(dest);                boolean ret = backtracking(dest, route);                route.pollLast();                bitmap[i] = false;                if (ret) return true;            }            ++i;        }        return false;    }}</code></pre><h2 id="Similar-Problems"><a href="#Similar-Problems" class="headerlink" title="Similar Problems:"></a>Similar Problems:</h2><ol><li>Leetcode 46 Permutations</li><li>Leetcode 79 Word Search</li><li>Leetcode 212 Word Search II</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/2793/" target="_blank" rel="noopener">Backtracking Templete</a> </li><li><a href="https://leetcode.com/problems/reconstruct-itinerary/" target="_blank" rel="noopener">Reconstruct Itinerary</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hints for algorithms and data structures</title>
    <link href="/2020/06/06/Greedy/"/>
    <url>/2020/06/06/Greedy/</url>
    
    <content type="html"><![CDATA[<p>From my perspective, solving Leetcode problems could be broken down into 2 parts:</p><ol><li>select a algorithm</li><li>determine data structure</li></ol><p>Here I will list some useful hint that can help me figure out which algorithm or data structure to use:</p><h1 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h1><h2 id="1-Greedy-Algorithm"><a href="#1-Greedy-Algorithm" class="headerlink" title="1. Greedy Algorithm"></a>1. Greedy Algorithm</h2><ul><li><p>Common hints:</p><ol><li>find minimum number of something to do something</li><li>find maximum number of something to fit in some conditions</li><li>typically propose an unsorted input</li></ol></li><li><p>idea behind it:</p><blockquote><p>Pick the locally optimal at each step, and this will lead to the globally optimal solution.</p></blockquote></li><li><p>Typical problem: <a href="https://leetcode.com/problems/two-city-scheduling/" target="_blank" rel="noopener">Leetcode 1029</a></p></li></ul><p>Coming soon…</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sorting</title>
    <link href="/2020/06/05/Sorting/"/>
    <url>/2020/06/05/Sorting/</url>
    
    <content type="html"><![CDATA[<p>This post is a conclusion of different sorting algorithms.</p><h2 id="1-insertion-sort"><a href="#1-insertion-sort" class="headerlink" title="1. insertion sort"></a>1. insertion sort</h2><h3 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition:"></a>Intuition:</h3><pre><code class="java">for (int i = 1; i &lt; list.length; i++) {    insert list[i] into a sorted sublist[0..i - 1] so that list[0..i] is sorted.}</code></pre><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation:"></a>Implementation:</h3><pre><code class="java">public static void insertionSort(int[] list) {    for (int i = 1; i &lt; list.length; i++) {        /** insert list[i] into a sorted sublist list[0..i-1] so that            list[0..i] is sorted. */        int currentElement = list[i];        int k;        for (k = i - 1; k &gt;= 0 &amp;&amp; list[k] &gt; currentElement; k--) {            list[k + 1] = list[k];        }        // Insert the current element into list[k+1]        list[k + 1] = currentElement;    }}</code></pre><h2 id="2-bubble-sort"><a href="#2-bubble-sort" class="headerlink" title="2. bubble sort"></a>2. bubble sort</h2><h3 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition:"></a>Intuition:</h3><pre><code class="java">for (int k = 1; k &lt; list.length; k++) {    for (int i = 0; i &lt; list.length - k; i++) {        if (list[i] &gt; list [k]) swap list[i] with list[i + 1];    }}</code></pre><h3 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation:"></a>Implementation:</h3><pre><code class="java">public static void bubbleSort(int[] list) {    boolean needNextPass = true;    int length = list.length;    int temp;    //i start from i, for at most need n - 1 passes    for (int i = 1; i &lt; length &amp;&amp; needNextPass; i++) {        //if a pass has no effect, then there is no need to carry next round        needNextPass = false;        //every pass sort at least one from beginning to end        for (int j = 0; j &lt; length - i; j++) {            if (list[j] &gt; list[j + 1]) {                temp = list[j];                list[j] = list[j + 1];                list[j + 1] = temp;                needNextPass = true;            }        }    }}</code></pre><h2 id="3-merge-sort"><a href="#3-merge-sort" class="headerlink" title="3. merge sort"></a>3. merge sort</h2><h3 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition:"></a>Intuition:</h3><pre><code class="java">//first divide, then mergeif (list.length &gt; 1) {    mergeSort(list[0 ... list.length / 2]);    mergeSort(list[list.length / 2 + 1 ... list.length]);    merge the results of above operation;}</code></pre><h3 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation:"></a>Implementation:</h3><pre><code class="java">public static void mergeSort(int[] list) {    int length = list.length;    if (length == 2) {        if (list[1] &lt; list[0]) {            int temp = list[0];            list[0] = list[1];            list[1] = temp;        }    } else if (length == 1) { }    else {        int[] l = new int[length / 2];        int[] r = new int[length - length / 2];        System.arraycopy(list, 0, l, 0, length / 2);        System.arraycopy(list, length / 2, r, 0, length - length / 2);        mergeSort(l);        mergeSort(r);        merge(l, r, list);    }}public static void merge(int[] list1, int[] list2, int[] temp) {    int current1 = 0; // Current index in list1    int current2 = 0; // Current index in list2    int current3 = 0; // Current index in temp    while (current1 &lt; list1.length &amp;&amp; current2 &lt; list2.length) {        if (list1[current1] &lt; list2[current2])            temp[current3++] = list1[current1++];        else            temp[current3++] = list2[current2++];    }    while (current1 &lt; list1.length)        temp[current3++] = list1[current1++];    while (current2 &lt; list2.length)        temp[current3++] = list2[current2++];}</code></pre><h2 id="4-quick-sort"><a href="#4-quick-sort" class="headerlink" title="4. quick sort"></a>4. quick sort</h2><h3 id="Intuition-3"><a href="#Intuition-3" class="headerlink" title="Intuition:"></a>Intuition:</h3><pre><code class="java">if (list.length &gt; 1) {    select a pivot;    partition list into list1 and list2 such that        all elements in list1 &lt;= pivot and        all elements in list2 &gt; pivot;    quicksort(list1);    quicksort(list2);}</code></pre><h3 id="Implementation-3"><a href="#Implementation-3" class="headerlink" title="Implementation:"></a>Implementation:</h3><pre><code class="java">public static void quickSort(int[] list) {    helper(list, 0, list.length - 1);}/**     * Recursion method.     * @param list     * @param from inclusive     * @param to inclusive     */public static void helper(int[] list, int from, int to) {    int length = to - from + 1;    if (length &lt;= 1) {}    else if (length == 2) {        if (list[from] &gt; list[to]) {            int temp = list[from];            list[from] = list[to];            list[to] = temp;        }    } else {        int pivot = list[from];        int lo = from;        int temp;        for (int i = 1; i &lt; length; i++) {            if (list[i + from] &lt;= pivot) {                lo += 1;                if (i + from &gt; lo) {                    temp = list[i + from];                    list[i + from] = list[lo];                    list[lo] = temp;                }            }        }        //swap pivot to its correct position        temp = list[lo];        list[lo] = pivot;        list[from] = temp;        if (lo - 1 &gt; from) helper(list, from, lo - 1);        if (lo + 1 &lt; to) helper(list, lo + 1, to);    }}</code></pre><h2 id="5-heap-sort"><a href="#5-heap-sort" class="headerlink" title="5. heap sort"></a>5. heap sort</h2><h3 id="Intuition-4"><a href="#Intuition-4" class="headerlink" title="Intuition:"></a>Intuition:</h3><pre><code class="java">//using the property of Max-heap or Min-heap//here suppose heap is a Min-heapfor (int i = 0; i &lt; list.length; i++) {    heap.add(list[i]);}for (int i = 0; i &lt; list.length; i++) {    list[i] = heap.poll();}</code></pre><h3 id="Implementation-4"><a href="#Implementation-4" class="headerlink" title="Implementation:"></a>Implementation:</h3><pre><code class="java">public static &lt;E extends Comparable&lt;E&gt;&gt; void heapSort(E[] list) {    // Create a Heap of integers    Heap&lt;E&gt; heap = new Heap&lt;&gt;();    // Add elements to the heap    for (int i = 0; i &lt; list.length; i++)        heap.add(list[i]);    // Remove elements from the heap    for (int i = list.length - 1; i &gt;= 0; i--)        list[i] = heap.remove();}</code></pre><p>note: <code>Java</code> has <code>PriorityQueue</code> class, which can be used as <code>heap</code>.</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ol><li>Introduction to Java Programming and Data Structure, Y. Daniel Liang</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Casting</title>
    <link href="/2020/06/04/Casting/"/>
    <url>/2020/06/04/Casting/</url>
    
    <content type="html"><![CDATA[<p>Casting sometimes annoys me, so I decided to write my understanding of casting and why we need to use casting.</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><blockquote><p>One object reference can be typecast into another object reference. This is called casting object.</p></blockquote><h2 id="Categories-of-casting"><a href="#Categories-of-casting" class="headerlink" title="Categories of casting"></a>Categories of casting</h2><ol><li>Implicit casting</li></ol><pre><code class="java">Object o = new Student();</code></pre><ol><li>Explicit casting</li></ol><pre><code class="java">Student b = (Student)o;</code></pre><h2 id="Why-need-casting"><a href="#Why-need-casting" class="headerlink" title="Why need casting"></a>Why need casting</h2><p>Tell compiler <code>o</code> is an instance of <code>Student</code> (in the above example), otherwise if <code>o</code> use some methods that belong to <code>Student</code> class, there will be a compile error.</p><pre><code class="java">void someMethod(Object myObject) {    if (myObject instanceof Circle) {        System.out.println(&quot;The circle diameter is &quot; +                          ((Circle)myObject).getDiameter());    }}</code></pre><p>Look at the above example, you may wonder why not declare <code>myObject</code> as a <code>Circle</code>? By doing, you will not need to do explicit casting in the future.</p><p>It’s time to introduce generic programming:</p><blockquote><p>Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.</p></blockquote><blockquote><p>To enable generic programming, it’s a good practice to declare a variable with a supertype that can accept an object of any subtype.</p></blockquote><h2 id="Need-to-care"><a href="#Need-to-care" class="headerlink" title="Need to care"></a>Need to care</h2><ol><li>casting an instance of a subclass to a variable of a superclass is always possible (upcasting)</li><li>casting an instance of a superclass to a variable of a subclass (downcasting) will result in a runtime exception if the superclass object is not an instance of the subclass.</li><li>neither static type nor dynamic type will be change by casting, from this point of view, casting is like a trick to make compiler smarter.</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>Introduction to Java Programming and Data Structure, Y. Daniel Liang</li><li><a href="https://en.wikipedia.org/wiki/Generic_programming#:~:text=Generic%20programming%20is%20a%20style,specific%20types%20provided%20as%20parameters." target="_blank" rel="noopener">Generic programming</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reflection</title>
    <link href="/2020/06/02/Reflection/"/>
    <url>/2020/06/02/Reflection/</url>
    
    <content type="html"><![CDATA[<h1 id="Segment-1-Result-oriented"><a href="#Segment-1-Result-oriented" class="headerlink" title="Segment 1. Result oriented"></a>Segment 1. Result oriented</h1><p>Even when I was a little boy, I was taught to set a goal, especially a long term goal. They said:</p><blockquote><p>You cannot emphasize the importance of goal too much.</p></blockquote><p>However, I never really get the point until entered graduate school. The only reason why I still had goals before that point is that I was told to. Although I had goals, I never felt their importance to me, because these goals were set by others (teachers, parent, community) rather than me.</p><p>After entering graduate school, there is no set goal, and I feel like a free bird, enjoying unexpected freedom as well as confusion. Thanks to this period of life, I finally realize why we need goals.</p><p>Without goals, I may learn the introduction chapter of several areas but never dive deeply into any of them. This useless hard work earned me nothing but the feeling that I am working really hard.</p><p>Without goals, the probability only depends on your fortune rather than your plan and your effort devoted to that.</p><p>There is a saying I love so much and I think it perfectly explain the importance of result oriented attitude:</p><blockquote><p>Success is to accomplish something as planned.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-72</title>
    <link href="/2020/05/31/LeetCode-72/"/>
    <url>/2020/05/31/LeetCode-72/</url>
    
    <content type="html"><![CDATA[<p>Description of this problem:</p><h2 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a>72. Edit Distance</h2><p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p><p>You have the following 3 operations permitted on a word:</p><ol><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ol><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example  1:"></a>Example  1:</h3><pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;Output: 3Explanation: horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)rorse -&gt; rose (remove &#39;r&#39;)rose -&gt; ros (remove &#39;e&#39;)</code></pre><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example  2:"></a>Example  2:</h3><pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;Output: 5Explanation: intention -&gt; inention (remove &#39;t&#39;)inention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)enention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)exention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)exection -&gt; execution (insert &#39;u&#39;)</code></pre><h2 id="My-understand"><a href="#My-understand" class="headerlink" title="My understand:"></a>My understand:</h2><h3 id="First-try"><a href="#First-try" class="headerlink" title="First try:"></a>First try:</h3><p>At beginning, I notice that LCS(longest common subsequence) could be used here, for example in example 1:</p><pre><code class="java">word1 = &quot;horse&quot;, word2 = &quot;ros&quot;;their LCS = &quot;os&quot;;thus except these common subsequence, word1 should replace, delete or replace in order to become word2;</code></pre><p>And here is my implementation:</p><pre><code class="java">class Solution {    public int minDistance2(String word1, String word2) {        int l1 = word1.length();        int l2 = word2.length();        int[][] table = new int[l2 + 1][l1 + 1];        int max = 0;        for (int i = 0; i &lt; l2; i++) {            for (int j = 0; j &lt; l1; j++) {                if (word1.charAt(j) == word2.charAt(i)) table[i + 1][j + 1] = table[i][j] + 1;                else table[i + 1][j + 1] = Math.max(table[i][j + 1], table[i + 1][j]);                max = Math.max(max, table[i + 1][j + 1]);            }        }        return Math.max(l1,l2) - max;    }}</code></pre><p>Here is the result:</p><pre><code>1003/1146 test cases passedInput:&quot;intention&quot; &quot;execution&quot;Expected: 5Output: 4</code></pre><p>The reason is that, in this way I try to reuse characters of common subsequence and only modify others. However, not all of the subsequence could be reused. In this case, the LCS is <code>&quot;etion&quot;</code>, but <code>&quot;e&quot;</code> in the wrong position, and cannot be excepted from additional operation.</p><h3 id="The-right-way"><a href="#The-right-way" class="headerlink" title="The right way"></a>The right way</h3><p>After reading solution I realize this is a classic problem, and there is a famous algorithm (Levenshtein distance) behind it:<br>$$<br>\operatorname{lev}<em>{a, b}(i, j)=\left{\begin{array}{ll}\max (i, j) &amp; \text { if } \min (i, j)=0 \ \min \left{\begin{array}{ll}\operatorname{lev}</em>{a, b}(i-1, j)+1 &amp; \ \operatorname{lev}<em>{a, b}(i, j-1)+1 &amp; \text { otherwise } \ \operatorname{lev}</em>{a, b}(i-1, j-1)+1_{\left(a_{i} \neq b_{j}\right)}\end{array}\right.\end{array}\right.<br>$$<br>Based on this, I write another:</p><pre><code class="java">public int minDistance(String word1, String word2) {    int l1 = word1.length();    int l2 = word2.length();    if (l1 == 0 || l2 == 0) return l1 + l2;    int[][] table = new int[l2 + 1][l1 + 1];    for (int i = 0; i &lt; l2 + 1; i++) table[i][0] = i;    for (int i = 0; i &lt; l1 + 1; i++) table[0][i] = i;    for (int i = 1; i &lt; l2 + 1; i++) {        for (int j = 1; j &lt; l1 + 1; j++) {            int top = table[i - 1][j] + 1;            int left = table[i][j - 1] + 1;            int topleft = (word1.charAt(j - 1) == word2.charAt(i - 1))? table[i - 1][j - 1] : table[i - 1][j - 1] + 1;            table[i][j] = Math.min(top, Math.min(left, topleft));        }    }    return table[l2][l1];}</code></pre><h3 id="Interesting-observations-to-share"><a href="#Interesting-observations-to-share" class="headerlink" title="Interesting observations to share"></a>Interesting observations to share</h3><p>Why in (1) we take the minimum between these three entries:</p><p>Here is explanation:</p><pre><code class="java">word1 = &quot;inte&quot;;word2 = &quot;ex&quot;;Suppose at some point we try to get transform from &quot;inte&quot; -&gt; &quot;ex&quot;:1.&quot;inte&quot; -&gt; &quot;e&quot;;            //this case corresponds to adding another &quot;x&quot;2.&quot;int&quot;  -&gt; &quot;ex&quot;;           //this case corresponds to deletion3.&quot;int&quot;  -&gt; &quot;e&quot;;            //this case corresponds to substitution, if word1[i] == word2[j], no substitution needed</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About money</title>
    <link href="/2020/05/30/money/"/>
    <url>/2020/05/30/money/</url>
    
    <content type="html"><![CDATA[<h2 id="I-used-to-wonder-why"><a href="#I-used-to-wonder-why" class="headerlink" title="I used to wonder why:"></a>I used to wonder why:</h2><h3 id="1-Why-some-people-are-rich-but-others-are-not"><a href="#1-Why-some-people-are-rich-but-others-are-not" class="headerlink" title="1. Why some people are rich but others are not."></a>1. Why some people are rich but others are not.</h3><h3 id="2-Why-making-money-is-so-easy-to-people-like-actors"><a href="#2-Why-making-money-is-so-easy-to-people-like-actors" class="headerlink" title="2. Why making money is so easy to people like actors."></a>2. Why making money is so easy to people like actors.</h3><p>One day, I pointed it out:</p><ol><li><p>View money as a special reward which represents your contribution to this society.</p><p>This could explain why engineers, scientists could make a lot of money when then find a way to improve society’s efficiency.</p></li><li><p>The rate of getting money measures your productivity.</p><p>This point could explain why actors could make so much money.</p><p>Everyone could tell a joke, and audience are willing to pay for it. So, literally we could make money in this way, but why only actors really do it? Because our productivity is so low that we can’t count on it. Suppose each joke worth 1 cent per person, in daily life we can tell it to very limited audience. However, actors could tell it to millions of people, and make thousands of dollar per second.</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Why use List</title>
    <link href="/2020/05/27/Why-List/"/>
    <url>/2020/05/27/Why-List/</url>
    
    <content type="html"><![CDATA[<p>Hi there, this is my new series, to record some pitfalls I’ve met during my daily learning of Java.</p><h2 id="Q-why-use-List-list-new-ArrayList-rather-than-ArrayList-list-new-ArrayList"><a href="#Q-why-use-List-list-new-ArrayList-rather-than-ArrayList-list-new-ArrayList" class="headerlink" title="Q: why use List list = new ArrayList rather than ArrayList list = new ArrayList?"></a>Q: why use List list = new ArrayList rather than ArrayList list = new ArrayList?</h2><p>I’ve seen a lot code starts like this:</p><pre><code class="java">List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></pre><p>and I wonder, why not write like this:</p><pre><code class="java">ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></pre><p>because in this way it’s more convenient to use APIs of <code>ArrayList</code> . </p><h2 id="A-The-first-way-will-allow-you-to-make-implementation-specific-changes-without-breaking-existing-code"><a href="#A-The-first-way-will-allow-you-to-make-implementation-specific-changes-without-breaking-existing-code" class="headerlink" title="A: The first way will allow you to make implementation-specific changes without breaking existing code."></a>A: The first way will allow you to make implementation-specific changes without breaking existing code.</h2><p><code>ArrayList</code> and <code>LinkedList</code> implement  <code>List</code> interface, so if you declare <code>list</code> with supepinterface <code>List</code> instead of more specific one (like <code>AarrayList</code> or <code>LinkedList</code>) you can change it later if you find you always need to modify its length but you declared it as an <code>ArrayList</code> a week ago.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Start_to_record</title>
    <link href="/2020/05/09/Start-to-record/"/>
    <url>/2020/05/09/Start-to-record/</url>
    
    <content type="html"><![CDATA[<h1 id="It’s-time-to-start-recording-my-life-now"><a href="#It’s-time-to-start-recording-my-life-now" class="headerlink" title="It’s time to start recording my life now"></a>It’s time to start recording my life now</h1><h2 id="Why-now"><a href="#Why-now" class="headerlink" title="Why now?"></a>Why now?</h2><p>In the past, I always thought that I was too young and I was not well prepared to take a photo. So, I just wait instead of doing anything (which I used to think that I would do). Suddenly, I am almost 25, and I finally realize we should just do it rather than hope in the future something magic will happen, because in most cases, we can never prepared one hundred percent for anything.</p><h2 id="Record-what"><a href="#Record-what" class="headerlink" title="Record what?"></a>Record what?</h2><ol><li>Movies</li><li>Books</li><li>Photos</li></ol><p>Not only just record them, but add meaningful tags to them. Build my memory palace on them. I spend time on them, I hope my record can preserve my feelings.</p><p>Everyday is unique for me, so if I can I want to record all of them. I love my life.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>New Journey</title>
    <link href="/2020/03/17/myfirstBlog/"/>
    <url>/2020/03/17/myfirstBlog/</url>
    
    <content type="html"><![CDATA[<p>As time goes by, I find it’s easier to forget things, which could be my knowledge and sweet memories.</p><p>So, it’s never too early to take screenshot of these invaluable moments.</p><p>I build these pages to remind me of all the wonderful things I’ve experienced.</p><p>I plan to write about:</p><ol><li>Things about life, like this one.</li><li>Technical things I’ve learned from anywhere.</li><li>More to be decided.</li></ol><p>Hope you enjoy my site.</p><p>Fixing small errors now.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
